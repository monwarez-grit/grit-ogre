#version 100

precision highp float;
precision highp int;
precision lowp sampler2D;
precision lowp samplerCube;

uniform vec4 lightPosition; // object space 
uniform vec4 eyePosition;   // object space 
uniform mat4 worldViewProj; // not actually used but here for compat with HLSL

varying vec3 oEyeDir;
varying vec3 oLightDir;
varying vec3 oHalfAngle;
varying vec4 oUv0;

attribute vec3 binormal;
attribute vec3 normal;
attribute vec3 tangent;
attribute vec4 uv0;
attribute vec4 vertex;

/* Vertex program that moves light and eye vectors into texture tangent space at vertex */ 

void main()
{
    // Calculate output position 
	gl_Position = worldViewProj * vertex;

    // Pass the main uvs straight through unchanged 
    oUv0 = uv0;

    vec3 lightDir = normalize(lightPosition.xyz -  (vertex.xyz * lightPosition.w));
	vec3 eyeDir = (eyePosition - vertex).xyz; 
    
    // Form a rotation matrix out of the vectors 
	mat3 rotation = mat3(tangent, binormal, normal); 
    
    // Transform the light vector according to this matrix 
	oLightDir = normalize(rotation * lightDir); 
	oEyeDir = normalize(rotation * eyeDir); 
    oHalfAngle = normalize(oEyeDir + oLightDir);
}

